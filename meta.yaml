{% set PKG_NAME = 'mr-box-peripheral-board' %}
{% set PLATFORMIO_ENVS = 'default'.split(' ') %}
{% set LIB_NAME = 'MrBoxPeripheralBoard' %}
{% set MODULE_NAME = PKG_NAME.replace('-', '_') %}

{% if GIT_DESCRIBE_NUMBER > '0' %}
{% set GIT_VERSION = GIT_DESCRIBE_TAG[1:] + '.post' + GIT_DESCRIBE_NUMBER %}
{% else %}
{% set GIT_VERSION = GIT_DESCRIBE_TAG[1:] %}
{% endif %}

# source will be downloaded prior to filling in jinja templates
# Example assumes that this folder has setup.py in it
source:
  git_url: ../

package:
  name: {{ PKG_NAME }}
  version: {{ GIT_VERSION }}

build:
  noarch: python
  entry_points:
    - mr-box-peripheral-board-upload = mr_box_peripheral_board.bin.upload:upload
  script:
    # Generate Arduino code
    - python -m paver generate_all_code
    # Copy Arduino library to Conda include directory
    - python -c
        "import os.path; import os; import shutil; import platformio_helpers as pioh;
        lib_src_dir = os.path.join(os.environ['SRC_DIR'], 'lib',
                                   '{{ LIB_NAME }}');
        install_dir = pioh.conda_arduino_include_path().joinpath('{{ LIB_NAME }}');
        shutil.copytree(lib_src_dir, install_dir);
        "
    # Build firmware
    - python -m paver build_firmware
    # Copy compiled firmware to Conda bin directory
    - python -c
        "import os.path; import os; import shutil; import platformio_helpers as pioh;
        SRC_DIR = os.environ['SRC_DIR'];
        SRC_DIR = os.environ['SRC_DIR'];
        PIO_BIN_DIR = pioh.conda_bin_path().joinpath('{{ PKG_NAME }}');
        created = (None if os.path.isdir(PIO_BIN_DIR)
                   else os.makedirs(PIO_BIN_DIR));
        shutil.copy2(os.path.join(SRC_DIR, 'platformio.ini'),
                     os.path.join(PIO_BIN_DIR, 'platformio.ini'));
        {% for pio_platform in PLATFORMIO_ENVS -%}
        HEX_DIR = os.path.join(PIO_BIN_DIR, '{{ pio_platform }}');
        os.makedirs(HEX_DIR);
        shutil.copy2(os.path.join(SRC_DIR, '.pioenvs', '{{ pio_platform }}',
                                  'firmware.hex'),
                      os.path.join(PIO_BIN_DIR, '{{ pio_platform }}',
                                   'firmware.hex'));
        {%- endfor %}
        "
    # Generate `setup.py` from `pavement.py` definition.
    - python -m paver generate_setup
    # Install source directory as Python package.
    - python -B setup.py install --single-version-externally-managed --record record.txt

requirements:
  build:
    - platformio-helpers >=0.10
    - future
    - nanopb-helpers >=0.6
    - paver
    - pip
    - platformio >=3.5.2b2.post20
    - platformio-framework-arduinoavr >=1.136.0
    - platformio-tool-scons
    - platformio-toolchain-atmelavr
    - pytables
    - python
    - base-node-rpc >=0.51.1
    - arduino-fast-digital
    - arduino-aligned-alloc
    - arduino-linked-list >=1.2.3
    - arduino-memory
    - trollius

#     Split into `noarch` C++ header package and platform-specific Python
#     package.
outputs:
  - name: {{ PKG_NAME }}-dev
    noarch: generic
    files:
      - share
    requirements:
      run:
        - arduino-fast-digital
        - arduino-aligned-alloc
        - arduino-linked-list >=1.2.3
        - arduino-memory
        - base-node-dev >=0.13.1
        - base-node-rpc >=0.51.1
        - platformio-tool-scons
        - platformio-toolchain-atmelavr
  - name: {{ PKG_NAME }}
    noarch: python
    files:
      - Lib/site-packages/{{ MODULE_NAME }}
    requirements:
      run:
        - asyncio-helpers
        - {{ pin_subpackage(PKG_NAME + '-dev', max_pin='x.x') }}
        - base-node >=0.13.1
        - conda-helpers >=0.20
        - logging-helpers
        - nanopb-helpers >=0.11.1
        - path_helpers
        - platformio-helpers >=0.10
        - protobuf >=3.5
        - python
        - serial-device >=0.9
    test:
      imports:
        - mr_box_peripheral_board
        - mr_box_peripheral_board._version
        - mr_box_peripheral_board.bin
        - mr_box_peripheral_board.proxy
      commands:
        - python -c
            "import sys; import os.path; import os; import shutil; import platformio_helpers as pioh;
            PIO_BIN_DIR = pioh.conda_bin_path().joinpath('{{ PKG_NAME }}');
            {% for pio_platform in PLATFORMIO_ENVS -%}
            HEX_DIR = os.path.join(PIO_BIN_DIR, '{{ pio_platform }}');
            HEX_PATH = os.path.join(HEX_DIR, 'firmware.hex');
            sys.exit(-1) if not os.path.isfile(HEX_PATH) else 0;
            {%- endfor %}
            "


about:
  home: https://gitlab.com/wheeler-microfluidics/mr-box-peripheral-board.py
  license: MIT
